name: Run DeepSeek Coder 1.3B with Bolt.diy

on:
  workflow_dispatch:

jobs:
  ollama-bolt:
    runs-on: ubuntu-latest
    steps:
    - name: Install Ollama
      run: |
        curl -fsSL https://ollama.ai/install.sh | sh

    - name: Pull DeepSeek Coder 1.3B
      run: |
        ollama rm deepseek-coder:1.3b -f || true
        ollama pull deepseek-coder:1.3b

    - name: Start Ollama
      run: |
        sudo ss -K dst localhost dport = 11434 || true
        OLLAMA_HOST=0.0.0.0 OLLAMA_ORIGINS=* ollama serve &
        timeout 120 bash -c 'until curl -s localhost:11434 >/dev/null; do sleep 2; done'

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18.x

    - name: Create Bolt.diy app
      run: |
        mkdir -p bolt-app/{public,src}
        cd bolt-app
        
        # Create package.json
        echo '{
          "name": "ollama-bolt",
          "version": "1.0.0",
          "main": "index.js",
          "scripts": {
            "start": "node index.js"
          },
          "dependencies": {
            "express": "^4.18.2",
            "axios": "^1.6.2",
            "cors": "^2.8.5"
          }
        }' > package.json
        
        # Create main server file
        echo 'const express = require("express");
        const axios = require("axios");
        const cors = require("cors");
        
        const app = express();
        app.use(cors());
        app.use(express.json());
        app.use(express.static("public"));
        
        app.post("/api/generate", async (req, res) => {
          try {
            const response = await axios.post("http://localhost:11434/api/generate", {
              model: "deepseek-coder:1.3b",
              prompt: req.body.prompt,
              stream: false
            });
            res.json(response.data);
          } catch (error) {
            res.status(500).json({ error: error.message });
          }
        });
        
        app.listen(3000, () => {
          console.log("Bolt.diy server running on port 3000");
        });' > index.js
        
        # Create frontend
        echo '<!DOCTYPE html>
        <html>
        <head>
            <title>Code Assistant</title>
            <style>
                body { font-family: sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
                #response { white-space: pre-wrap; background: #f5f5f5; padding: 15px; border-radius: 5px; }
            </style>
        </head>
        <body>
            <h1>DeepSeek Coder 1.3B</h1>
            <textarea id="prompt" rows="5" cols="80" placeholder="Enter your code question..."></textarea>
            <br>
            <button onclick="generate()">Generate Code</button>
            <pre id="response"></pre>
            
            <script>
                async function generate() {
                    const prompt = document.getElementById("prompt").value;
                    const response = await fetch("/api/generate", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ prompt })
                    });
                    const data = await response.json();
                    document.getElementById("response").textContent = data.response;
                }
            </script>
        </body>
        </html>' > public/index.html
        
        npm install
        npm start &

    - name: Install ngrok
      run: |
        wget -q https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz
        tar -xf ngrok-v3-stable-linux-amd64.tgz
        chmod +x ngrok

    - name: Expose Bolt UI
      env:
        NGROK_TOKEN: ${{ secrets.NGROK_TOKEN }}
      run: |
        ./ngrok config add-authtoken $NGROK_TOKEN
        ./ngrok http 3000
