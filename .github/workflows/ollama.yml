name: Run DeepSeek Coder with Unmodified Bolt.DIY

on:
  workflow_dispatch:

jobs:
  ollama-bolt:
    runs-on: ubuntu-latest
    steps:
    - name: Install Ollama
      run: |
        curl -fsSL https://ollama.ai/install.sh | sh

    - name: Pull DeepSeek Coder 1.3B
      run: |
        ollama rm deepseek-coder:1.3b -f || true
        ollama pull deepseek-coder:1.3b

    - name: Start Ollama
      run: |
        sudo ss -K dst localhost dport = 11434 || true
        OLLAMA_HOST=0.0.0.0 ollama serve &
        timeout 180 bash -c 'until ollama list | grep -q "deepseek"; do sleep 5; done'

    - name: Clone Bolt.DIY
      run: |
        git clone https://github.com/Kidjig/bolt.diy.git bolt-app
        cd bolt-app

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18.x

    - name: Install Dependencies
      run: |
        cd bolt-app
        npm install
        npm install axios

    - name: Add Ollama API Endpoint
      run: |
        cd bolt-app
        echo '
        import axios from "axios";
        
        // Add Ollama endpoint to existing routes
        export async function ollamaGenerate(prompt) {
          try {
            const response = await axios.post("http://localhost:11434/api/generate", {
              model: "deepseek-coder:1.3b",
              prompt: prompt,
              stream: false
            });
            return response.data.response;
          } catch (error) {
            return `Error: ${error.message}`;
          }
        }' > src/ollama.js
        
        # Add to existing routes
        echo 'import { ollamaGenerate } from "./ollama.js";
        // Add to existing routes
        app.route("/api/generate", async (req) => {
          const result = await ollamaGenerate(req.body.prompt);
          return new Response(result);
        });' >> src/routes.js

    - name: Start Server
      run: |
        cd bolt-app
        npm run dev &
        timeout 30 bash -c 'until curl -s localhost:3000 >/dev/null; do sleep 2; done'

    - name: Install ngrok
      run: |
        wget -q https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz
        tar -xf ngrok-v3-stable-linux-amd64.tgz
        chmod +x ngrok

    - name: Expose UI
      env:
        NGROK_TOKEN: ${{ secrets.NGROK_TOKEN }}
      run: |
        ./ngrok config add-authtoken $NGROK_TOKEN
        ./ngrok http 3000
