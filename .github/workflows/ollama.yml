name: Run DeepSeek Coder with Bolt.DIY

on:
  workflow_dispatch:

jobs:
  ollama-bolt:
    runs-on: ubuntu-latest
    steps:
    - name: Install Ollama
      run: |
        curl -fsSL https://ollama.ai/install.sh | sh

    - name: Pull DeepSeek Coder
      run: |
        ollama rm deepseek-coder:1.3b -f || true
        ollama pull deepseek-coder:1.3b

    - name: Start Ollama (Verified)
      run: |
        sudo ss -K dst localhost dport = 11434 || true
        OLLAMA_HOST=0.0.0.0 ollama serve &
        timeout 180 bash -c 'until curl -s http://localhost:11434/api/tags | grep -q "deepseek"; do sleep 5; done'

    - name: Clone and Configure Bolt.DIY
      run: |
        git clone https://github.com/Kidjig/bolt.diy.git bolt-app
        cd bolt-app
        echo 'module.exports = { future: { v3_lazyRouteDiscovery: true, v3_singleFetch: true } };' > remix.config.js

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18.x

    - name: Install Dependencies
      run: |
        cd bolt-app
        npm install
        npm install axios

    - name: Add Ollama Integration
      run: |
        cd bolt-app
        mkdir -p src
        echo 'import axios from "axios";
        export async function ollamaGenerate(prompt) {
          try {
            const response = await axios.post("http://localhost:11434/api/generate", {
              model: "deepseek-coder:1.3b",
              prompt: prompt,
              stream: false
            });
            return response.data.response;
          } catch (error) {
            return `Error: ${error.message}`;
          }
        }' > src/ollama.js

        echo 'import { ollamaGenerate } from "./ollama.js";
        app.route("/api/generate", async (req) => {
          const result = await ollamaGenerate(req.body.prompt);
          return new Response(result);
        });' >> src/app.js

    - name: Start Services
      run: |
        # Start Bolt.DIY in background
        cd bolt-app
        nohup npm run dev > server.log 2>&1 &
        
        # Start ngrok in background
        ../ngrok http 5173 --log=stdout > ngrok.log &
        
        # Verify services
        timeout 60 bash -c 'until curl -s localhost:5173 >/dev/null && grep -q "started tunnel" ngrok.log; do sleep 2; done'
        echo "Public URL: $(grep 'url=https://' ngrok.log | awk -F'url=' '{print $2}')"

    - name: Keep Alive
      env:
        NGROK_TOKEN: ${{ secrets.NGROK_TOKEN }}
      run: |
        # Continuous health checks
        while true; do
          echo "=== Service Status ==="
          curl -s localhost:11434/api/tags | jq -r '.models[].name'
          curl -s localhost:5173 >/dev/null && echo "Bolt.DIY: Running" || echo "Bolt.DIY: Down"
          sleep 300  # 5 minute intervals
        done
